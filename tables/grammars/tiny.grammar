# Tiny grammar for semantic parsing on tables.
# Use emnlp2013.grammar as the base grammar.

################################################################
# Macros

(def @R reverse)
(def @type fb:type.object.type)
(def @row fb:type.row)
(def @cell fb:type.cell)
(def @any fb:type.any)

################################################################
# Lexicon

################################
# Padding: can skip these sequences
(rule $Padding ($PHRASE) (IdentityFn))

################################
# TokenSpan
(rule $TokenSpan ($PHRASE) (FilterSpanLengthFn 1))

################################
# Entity, Unary, Binary (using FuzzyMatchFn)
(rule $Entity ($TokenSpan) (FuzzyMatchFn entity))
(rule $Entity ($PHRASE) (NumberFn))
(rule $Entity ($PHRASE) (DateFn))
(rule $Binary ($TokenSpan) (FuzzyMatchFn binary))

################################
# Hard coded rules
(rule $Operator (how many) (ConstantFn (lambda x (count (var x)))))
(rule $Binary (after) (ConstantFn fb:row.row.next))
(rule $Binary (before) (ConstantFn fb:row.row.next))

# (argmax 1 1 (!r.nation *) (@R (lambda c (!r.total (r.nation (var c))))))
# (argmax 1 1 (!x *) (@R (lambda c (!y (x (var c)))))

(rule $DoubleOperator (most) (ConstantFn
  (lambda x (lambda y
    (argmax 1 1
      ((@R (var x)) *)
      (@R (lambda c ((@R (var y)) ((var x) (var c)))))
    )
  ))
  (-> (-> @cell @row) (-> (-> @cell @row) @cell))
))
(rule $DoubleOperator (most) (ConstantFn
  (lambda x (lambda y
    (argmax 1 1
      ((@R (var x)) *)
      (@R (lambda c (count ((@R (var y)) ((var x) (var c))))))
    )
  ))
  (-> (-> @cell @row) (-> (-> @cell @row) @cell))
))
#(rule $Operator (most length) (ConstantFn
#  (lambda x
#    (argmax 1 1
#      ((@R (var x)) *)
#      (@R (lambda c (!fb:row.row.length ((var x) (var c)))))
#    )
#  )
#  (-> (-> @cell @row) @cell)
#))
#(rule $Operator (title with the most) (ConstantFn
#  (lambda y
#    (argmax 1 1
#      (!fb:row.row.title *)
#      (@R (lambda c ((@R (var y)) (fb:row.row.title (var c)))))
#    )
#  )
#  (-> (-> @cell @row) @cell)
#))

################################################################
# Composition

################################
# Join
(rule $Set ($Entity) (IdentityFn))
(rule $Set ($Binary ($Padding optional) $Set) (JoinFn binary,unary unaryCanBeArg0 unaryCanBeArg1))
(rule $Set ($Set ($Padding optional) $Binary) (JoinFn unary,binary unaryCanBeArg0 unaryCanBeArg1))
(rule $Set ($Set ($Padding optional) $Set) (MergeFn and))

################################
# Aggregation / Superlative
(rule $Set ($Operator ($Padding optional) $Set) (JoinFn binary,unary unaryCanBeArg1 betaReduce))
(rule $Set ($Set ($Padding optional) $Operator) (JoinFn unary,binary unaryCanBeArg1 betaReduce))
(rule $Set ($Operator ($Padding optional) $Binary) (JoinFn binary,unary unaryCanBeArg1 betaReduce))
(rule $Set ($Binary ($Padding optional) $Operator) (JoinFn unary,binary unaryCanBeArg1 betaReduce))
(rule $Operator ($Binary ($Padding optional) $DoubleOperator) (JoinFn unary,binary unaryCanBeArg1 betaReduce))
(rule $Operator ($DoubleOperator ($Padding optional) $Binary) (JoinFn binary,unary unaryCanBeArg1 betaReduce))

################################
# ROOT
(rule $ROOT (($Padding optional) $Set ($Padding optional)) (IdentityFn))

################################################################
# For debugging:

(rule $Any ($Set) (IdentityFn))
(rule $Any ($Binary) (IdentityFn))
(rule $Any ($Operator) (IdentityFn))
(rule $Any ($DoubleOperator) (IdentityFn))
#(rule $ROOT ($Any) (IdentityFn))
