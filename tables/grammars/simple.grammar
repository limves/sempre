# Simple Grammar
# Use only joins, next, and maybe superlatives

################################################################
# Macros

(def @R reverse)
(def @type fb:type.object.type)
(def @row fb:type.row)

(def @next fb:row.row.next)
(def @!next !fb:row.row.next)
(def @index fb:row.row.index)
(def @!index !fb:row.row.index)

(def @p.num fb:cell.cell.number)
(def @!p.num !fb:cell.cell.number)
(def @p.date fb:cell.cell.date)
(def @!p.date !fb:cell.cell.date)

################################################################
# Lexicon

################################
# Anchored Rules: Entity, Unary, Binary
(rule $Entity ($PHRASE) (FuzzyMatchFn entity) (anchored 1))
(rule $Binary ($PHRASE) (FuzzyMatchFn binary) (anchored 1))
(rule $Entity ($PHRASE) (NumberFn) (anchored 1))
(rule $Entity ($PHRASE) (DateFn) (anchored 1))

################################
# Create binary from thin air
(rule $Binary (nothing) (FuzzyMatchFn any binary))

################################
# Property
# (@p.num (number 42)) / (@p.date (date 2012 12 21))
(for @property (@p.num @p.date)
  (rule $Property (nothing) (ConstantFn @property))
)

################################################################
# Composition

# $RowSet = list of rows (type = fb:row.row)
# $ValueSet = list of values (NameValue or other primitives)

################################
# Generic Rows
# (@type @row)
(rule $RowSet (nothing) (ConstantFn (@type @row)))

################################
# Join
# c_name.barack_obama
(rule $ValueSet ($Entity) (IdentityFn))
# (c.name c_name.barack_obama)
(rule $RowSet ($Binary $ValueSet) (lambda b (lambda v ((var b) (var v)))))
# (!c.name (...[rows]...)) --> c_name.barack_obama
(rule $ValueSet ($Binary $RowSet) (lambda b (lambda r ((@R (var b)) (var r)))))
# (c.height (@p.num (number 180)))
(rule $RowSet ($Binary $Property $ValueSet)
  (lambda b (lambda p (lambda v ((var b) ((var p) (var v))))))
)
# (@!p.num (!c.height (...[rows]...))) --> (number 180)
(rule $ValueSet ($Binary $Property $RowSet)
  (lambda b (lambda p (lambda r ((@R (var p)) ((@R (var b)) (var r))))))
)

(when movement
  # (@next (...[rows]...)) --> ...[rows]...
  (for @movement (@next @!next)
    # HACK: Added 'nothing' to prevent unary cycle
    (rule $RowSet (nothing $RowSet) (lambda r (@movement (var r))))
  )
)

################################
# Superlative

(when superlative
  (for @argm (argmax argmin)
    # "first", "last"
    (rule $RowSet (nothing $RowSet) (lambda r (@argm 1 1 (var r) @index)))
    # Generic argmax / argmin on rows or values
    # (argmax 1 1 (@type @row) (reverse ___))
    # ___ = (lambda r (@!p.num (!c.height (var r))))
    # "highest"
    (rule $RowSet ($RowSet $Binary $Property)
      (lambda r (lambda b (lambda p (@argm 1 1 (var r) (reverse (lambda x ((@R (var p)) ((@R (var b)) (var x) ))))))))
    )
  )
)

################################
# ROOT
(rule $ROOT ($ValueSet) (IdentityFn))

################################################################
# For debugging:

(when debug 
  (rule $Any ($ValueSet) (IdentityFn))
  (rule $Any ($RowSet) (IdentityFn))
  (rule $ROOT ($Any) (IdentityFn))
)
