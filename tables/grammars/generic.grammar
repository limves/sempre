# Generic Grammar
# Use more generic compositional patterns.

################################################################
# Macros

(def @R reverse)
(def @type fb:type.object.type)
(def @row fb:type.row)

(def @next fb:row.row.next)
(def @!next !fb:row.row.next)
(def @index fb:row.row.index)
(def @!index !fb:row.row.index)

(def @p.num fb:cell.cell.number)
(def @!p.num !fb:cell.cell.number)
(def @p.date fb:cell.cell.date)
(def @!p.date !fb:cell.cell.date)

################################################################
# Lexicon

################################
# Anchored Rules: Entity, Unary, Binary
(rule $Entity ($PHRASE) (FuzzyMatchFn entity) (anchored 1))
(rule $Binary ($PHRASE) (FuzzyMatchFn binary) (anchored 1))
(rule $Entity ($PHRASE) (NumberFn) (anchored 1))
(rule $Entity ($PHRASE) (DateFn) (anchored 1))

################################
# Create binary from thin air
(rule $Binary (nothing) (FuzzyMatchFn any binary))

################################
# Property
# (@p.num (number 42)) / (@p.date (date 2012 12 21))
(for @property (@p.num @p.date)
  (rule $Property (nothing) (ConstantFn @property))
)

################################################################
# Composition

# $RowSet = list of rows (type = fb:row.row)
# $ValueSet = list of values (NameValue or other primitives)
# $SingleValue = number representing count (may not make sense to compose it with other things)

################################
# Generic Rows
# (@type @row)
(rule $RowSet (nothing) (ConstantFn (@type @row)))

################################
# Join
# c_name.barack_obama
(rule $ValueSet ($Entity) (IdentityFn))
# (or c_name.barack_obama c_name.bill_clinton)
(rule $ValueSet ($Entity $Entity) (lambda e1 (lambda e2 (or (var e1) (var e2)))))
# (c.name c_name.barack_obama)
(rule $RowSet ($Binary $ValueSet) (lambda b (lambda v ((var b) (var v)))))
# (!c.name (...[rows]...)) --> c_name.barack_obama
(rule $ValueSet ($Binary $RowSet) (lambda b (lambda r ((@R (var b)) (var r)))))
# (c.height (@p.num (number 180)))
(rule $RowSet ($Binary $Property $ValueSet)
  (lambda b (lambda p (lambda v ((var b) ((var p) (var v))))))
)
# (@!p.num (!c.height (...[rows]...))) --> (number 180)
(rule $ValueSet ($Binary $Property $RowSet)
  (lambda b (lambda p (lambda r ((@R (var p)) ((@R (var b)) (var r))))))
)
# (@next (...[rows]...)) --> ...[rows]...
(for @movement (@next @!next)
  # HACK: Added 'nothing' to prevent unary cycle
  (rule $RowSet (nothing $RowSet) (lambda r (@movement (var r))))
)

(when comparison
  # (c.name (!= c_name.barack_obama))
  (rule $RowSet ($Binary $Entity)
    (lambda b (lambda e ((var b) (!= (var e)))))
  )
  # (c.height (@p.num (>= (number 180))))
  (for @comparison (!= < > <= >=)
    (rule $RowSet ($Binary $Property $Entity)
      (lambda b (lambda p (lambda e ((var b) ((var p) (@comparison (var e)))))))
    )
  )
)

################################
# Aggregate

# (count (...[rows]...)) --> (number 4)
(rule $SingleValue ($RowSet) (lambda r (count (var r))))
(when aggregate
  (rule $SingleValue ($ValueSet) (lambda r (min (var r))))
  (rule $SingleValue ($ValueSet) (lambda r (max (var r))))
  (rule $SingleValue ($ValueSet) (lambda r (sum (var r))))
  (rule $SingleValue ($ValueSet) (lambda r (avg (var r))))
)

################################
# Superlative

# Function on row set -- used in:
# (argmax 1 1 (@type @row) (reverse ___))
# ___ = (lambda r (@!p.num (!c.height (var r))))
# "highest"
(rule $FnOnRow ($Binary $Property)
  (lambda b (lambda p (lambda r ((@R (var p)) ((@R (var b)) (var r))))))
)

# Function on value set -- used in:
# (argmax 1 1 (!c.name (@type @row)) (reverse ___))
# ___ = (lambda v (count (c.name (var v))))
# "which name occurs the most often"
(rule $FnOnValue ($Binary)
  (lambda b (lambda v (count ((var b) (var v)))))
)
# (argmax 1 1 (@!p.num (!c.height (@type @row))) (reverse ___))
# ___ = (lambda v (count (c.height (@p.num (var v)))))
# "which height occurs the most often"
(rule $FnOnValue ($Binary $Property)
  (lambda b (lambda p (lambda v (count ((var b) ((var p) (var v)))))))
)
# (argmax 1 1 (!c.name (@type @row)) (reverse ___))
# ___ = (lambda v (@!p.num (!c.height (c.name (var v)))))
# "which person is the highest"
(rule $FnOnValue ($Binary $Binary $Property)
  (lambda b1 (lambda b2 (lambda p (lambda v ((@R (var p)) ((@R (var b2)) ((var b1) (var v))))))))
)

# Actual declaration for argmin and argmax
(for @argm (argmax argmin)
  # "first", "last"
  (rule $RowSet (nothing $RowSet) (lambda r (@argm 1 1 (var r) @index)))
  # Generic argmax / argmin on rows or values
  (rule $RowSet ($RowSet $FnOnRow) (lambda r (lambda f (@argm 1 1 (var r) (reverse (var f))))))
  (rule $ValueSet ($ValueSet $FnOnValue) (lambda v (lambda f (@argm 1 1 (var v) (reverse (var f))))))
)

################################
# Arithmetic

# (- (... (c_name.barack_obama)) (... (c_name.bill_clinton)))
# "How much taller is Barack Obama than Bill Clinton"
(when arithmetic
  (rule $SingleValue ($FnOnValue $Entity $Entity)
    (lambda f (lambda e1 (lambda e2 (- ((var f) (var e1)) ((var f) (var e2))))))
  )
)

################################
# Merge
# Warning: Without pruning, this can blow up the search space!
(when merge
  (rule $RowSet ($RowSet $RowSet) (lambda r1 (lambda r2 (and (var r1) (var r2)))))
)

################################
# ROOT
(rule $ROOT ($ValueSet) (IdentityFn))
(rule $ROOT ($SingleValue) (IdentityFn))

################################################################
# For debugging:

(when debug 
  (rule $Any ($ValueSet) (IdentityFn))
  (rule $Any ($RowSet) (IdentityFn))
  (rule $Any ($SingleValue) (IdentityFn))
  (rule $ROOT ($Any) (IdentityFn))
)
